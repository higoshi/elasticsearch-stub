# Stubs for elasticsearch.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..compat import string_types, unquote, urlparse
from ..exceptions import TransportError
from ..transport import Transport
from .cat import CatClient
from .cluster import ClusterClient
from .indices import IndicesClient
from .ingest import IngestClient
from .nodes import NodesClient
from .remote import RemoteClient
from .snapshot import SnapshotClient
from .tasks import TasksClient
from .utils import SKIP_IN_PATH, _make_path, query_params
from .xpack import XPackClient
from typing import Any, Optional

logger: Any

class Elasticsearch:
    transport: Any = ...
    indices: Any = ...
    ingest: Any = ...
    cluster: Any = ...
    cat: Any = ...
    nodes: Any = ...
    remote: Any = ...
    snapshot: Any = ...
    tasks: Any = ...
    xpack: Any = ...
    def __init__(self, hosts: Optional[Any] = ..., transport_class: Any = ..., **kwargs: Any) -> None: ...
    def ping(self, params: Optional[Any] = ...): ...
    def info(self, params: Optional[Any] = ...): ...
    def create(self, index: Any, doc_type: Any, id: Any, body: Any, params: Optional[Any] = ...): ...
    def index(self, index: Any, doc_type: Any, body: Any, id: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def exists(self, index: Any, doc_type: Any, id: Any, params: Optional[Any] = ...): ...
    def exists_source(self, index: Any, doc_type: Any, id: Any, params: Optional[Any] = ...): ...
    def get(self, index: Any, doc_type: Any, id: Any, params: Optional[Any] = ...): ...
    def get_source(self, index: Any, doc_type: Any, id: Any, params: Optional[Any] = ...): ...
    def mget(self, body: Any, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def update(self, index: Any, doc_type: Any, id: Any, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def search(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def update_by_query(self, index: Any, doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def reindex(self, body: Any, params: Optional[Any] = ...): ...
    def reindex_rethrottle(self, task_id: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def delete_by_query(self, index: Any, body: Any, doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def search_shards(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def search_template(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def explain(self, index: Any, doc_type: Any, id: Any, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def scroll(self, scroll_id: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def clear_scroll(self, scroll_id: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def delete(self, index: Any, doc_type: Any, id: Any, params: Optional[Any] = ...): ...
    def count(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def bulk(self, body: Any, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def msearch(self, body: Any, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def termvectors(self, index: Any, doc_type: Any, id: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def mtermvectors(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def put_script(self, id: Any, body: Any, context: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_script(self, id: Any, params: Optional[Any] = ...): ...
    def delete_script(self, id: Any, params: Optional[Any] = ...): ...
    def render_search_template(self, id: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def msearch_template(self, body: Any, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def field_caps(self, index: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
