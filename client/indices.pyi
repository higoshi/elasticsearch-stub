# Stubs for elasticsearch.client.indices (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .utils import NamespacedClient, SKIP_IN_PATH, _make_path, query_params
from typing import Any, Optional

class IndicesClient(NamespacedClient):
    def analyze(self, index: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def refresh(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def flush(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def create(self, index: Any, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get(self, index: Any, feature: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def open(self, index: Any, params: Optional[Any] = ...): ...
    def close(self, index: Any, params: Optional[Any] = ...): ...
    def delete(self, index: Any, params: Optional[Any] = ...): ...
    def exists(self, index: Any, params: Optional[Any] = ...): ...
    def exists_type(self, index: Any, doc_type: Any, params: Optional[Any] = ...): ...
    def put_mapping(self, doc_type: Any, body: Any, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_mapping(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_field_mapping(self, fields: Any, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def put_alias(self, index: Any, name: Any, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def exists_alias(self, index: Optional[Any] = ..., name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_alias(self, index: Optional[Any] = ..., name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def update_aliases(self, body: Any, params: Optional[Any] = ...): ...
    def delete_alias(self, index: Any, name: Any, params: Optional[Any] = ...): ...
    def put_template(self, name: Any, body: Any, params: Optional[Any] = ...): ...
    def exists_template(self, name: Any, params: Optional[Any] = ...): ...
    def get_template(self, name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def delete_template(self, name: Any, params: Optional[Any] = ...): ...
    def get_settings(self, index: Optional[Any] = ..., name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def put_settings(self, body: Any, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def stats(self, index: Optional[Any] = ..., metric: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def segments(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def validate_query(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def clear_cache(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def recovery(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def upgrade(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_upgrade(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def flush_synced(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def shard_stores(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def forcemerge(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def shrink(self, index: Any, target: Any, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def rollover(self, alias: Any, new_index: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
